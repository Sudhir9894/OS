#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
sem_t mutex;
int shared_resource = 0;
void *thread_function(void *arg)
{
 int i, val;

 for (i = 0; i < 5; i++) {
 sem_wait(&mutex);
 val = shared_resource;
 printf("Thread %ld: Read %d from shared resource\n", (long)arg, val);
 val++;
 printf("Thread %ld: Writing %d to shared resource\n", (long)arg, val);
 shared_resource = val;
 sem_post(&mutex);
 }
 pthread_exit(NULL);
}
int main()
{
 pthread_t threads[3];
 int i, ret;
 sem_init(&mutex, 0, 1);

 for (i = 0; i < 3; i++) {
 ret = pthread_create(&threads[i], NULL, thread_function, (void *)i);
 if (ret != 0) {
 printf("Error: pthread_create() failed\n");
 return -1;
 }
 } for (i = 0; i < 3; i++) {
 ret = pthread_join(threads[i], NULL);
 if (ret != 0) {
 printf("Error: pthread_join() failed\n");
 return -1;
 }
 }

 sem_destroy(&mutex);
 return 0;
} 